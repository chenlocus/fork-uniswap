{
  "contractName": "IMulticall",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/interfaces/IMulticall.sol\":\"IMulticall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n",
  "sourcePath": "C:\\Users\\fork-uniswap\\periphery\\contracts\\interfaces\\IMulticall.sol",
  "ast": {
    "absolutePath": "project:/contracts/interfaces/IMulticall.sol",
    "exportedSymbols": {
      "IMulticall": [
        12357
      ]
    },
    "id": 12358,
    "license": "GPL-2.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12344,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "45:24:66"
      },
      {
        "id": 12345,
        "literals": [
          "abicoder",
          "v2"
        ],
        "nodeType": "PragmaDirective",
        "src": "70:19:66"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 12346,
          "nodeType": "StructuredDocumentation",
          "src": "91:109:66",
          "text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
        },
        "fullyImplemented": false,
        "id": 12357,
        "linearizedBaseContracts": [
          12357
        ],
        "name": "IMulticall",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 12347,
              "nodeType": "StructuredDocumentation",
              "src": "227:378:66",
              "text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
            },
            "functionSelector": "ac9650d8",
            "id": 12356,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "multicall",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12351,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12350,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 12356,
                  "src": "629:21:66",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12348,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "629:5:66",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 12349,
                    "nodeType": "ArrayTypeName",
                    "src": "629:7:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "628:23:66"
            },
            "returnParameters": {
              "id": 12355,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12354,
                  "mutability": "mutable",
                  "name": "results",
                  "nodeType": "VariableDeclaration",
                  "scope": 12356,
                  "src": "678:22:66",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12352,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "678:5:66",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 12353,
                    "nodeType": "ArrayTypeName",
                    "src": "678:7:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "677:24:66"
            },
            "scope": 12357,
            "src": "610:92:66",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 12358,
        "src": "200:504:66"
      }
    ],
    "src": "45:660:66"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/interfaces/IMulticall.sol",
      "exportedSymbols": {
        "IMulticall": [
          12357
        ]
      },
      "license": "GPL-2.0-or-later"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            ">=",
            "0.7",
            ".5"
          ]
        },
        "id": 12344,
        "name": "PragmaDirective",
        "src": "45:24:66"
      },
      {
        "attributes": {
          "literals": [
            "abicoder",
            "v2"
          ]
        },
        "id": 12345,
        "name": "PragmaDirective",
        "src": "70:19:66"
      },
      {
        "attributes": {
          "abstract": false,
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "interface",
          "fullyImplemented": false,
          "linearizedBaseContracts": [
            12357
          ],
          "name": "IMulticall",
          "scope": 12358
        },
        "children": [
          {
            "attributes": {
              "text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
            },
            "id": 12346,
            "name": "StructuredDocumentation",
            "src": "91:109:66"
          },
          {
            "attributes": {
              "functionSelector": "ac9650d8",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "multicall",
              "scope": 12357,
              "stateMutability": "payable",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
                },
                "id": 12347,
                "name": "StructuredDocumentation",
                "src": "227:378:66"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "data",
                      "scope": 12356,
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "type": "bytes[]",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "type": "bytes[]"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "bytes",
                              "type": "bytes"
                            },
                            "id": 12348,
                            "name": "ElementaryTypeName",
                            "src": "629:5:66"
                          }
                        ],
                        "id": 12349,
                        "name": "ArrayTypeName",
                        "src": "629:7:66"
                      }
                    ],
                    "id": 12350,
                    "name": "VariableDeclaration",
                    "src": "629:21:66"
                  }
                ],
                "id": 12351,
                "name": "ParameterList",
                "src": "628:23:66"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "results",
                      "scope": 12356,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "bytes[]",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "type": "bytes[]"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "bytes",
                              "type": "bytes"
                            },
                            "id": 12352,
                            "name": "ElementaryTypeName",
                            "src": "678:5:66"
                          }
                        ],
                        "id": 12353,
                        "name": "ArrayTypeName",
                        "src": "678:7:66"
                      }
                    ],
                    "id": 12354,
                    "name": "VariableDeclaration",
                    "src": "678:22:66"
                  }
                ],
                "id": 12355,
                "name": "ParameterList",
                "src": "677:24:66"
              }
            ],
            "id": 12356,
            "name": "FunctionDefinition",
            "src": "610:92:66"
          }
        ],
        "id": 12357,
        "name": "ContractDefinition",
        "src": "200:504:66"
      }
    ],
    "id": 12358,
    "name": "SourceUnit",
    "src": "45:660:66"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-03-05T10:56:34.624Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "data": "The encoded function data for each of the calls to make to this contract"
        },
        "returns": {
          "results": "The results from each of the calls passed in via data"
        }
      }
    },
    "title": "Multicall interface",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
      }
    },
    "notice": "Enables calling multiple methods in a single call to the contract",
    "version": 1
  }
}